0001   0000             ; SYSINFO81 
0002   0000             ; 	GPL
0003   0000             ; 	Oliver Lange
0004   0000             ; 	Version 1.0.1
0005   0000             
0006   0000             ; Compile with "tasm -80 -b sysinfo.asm sysinfo.p" 
0007   0000             
0008   0000             
0009   0000             
0010   0000             ; 2010/2011: Modifiziert für Spar-Interface mit TTLs - Siehe Forum
0011   0000             ; 			 256 Bytes RAM an 3E00h nicht mehr nötig
0012   0000             
0013   0000             
0014   0000             
0015   0000             
0016   0000              
0017   0000             #define db .byte ;  cross-assembler definitions 
0018   0000             #define dw .word 
0019   0000             #define ds .block 
0020   0000             #define org .org 
0021   0000             #define end .end 
0022   0000             
0023   0000             
0024   0000             
0025   0000             #define COM_ADDR  0EFh
0026   0000             #define COM_DAT   06Fh
0027   0000             
0028   0000             #define ADDR_LED  020h
0029   0000             #define ADDR_SELA 030h
0030   0000             #define ADDR_SELB 038h
0031   0000             #define A_RHR 00h
0032   0000             #define A_THR 00h
0033   0000             #define A_IER 01h
0034   0000             #define A_FCR 02h
0035   0000             #define A_ISR 02h
0036   0000             #define A_LCR 03h
0037   0000             #define A_MCR 04h
0038   0000             #define A_LSR 05h
0039   0000             #define A_MSR 06h
0040   0000             #define A_SCPAD 07h
0041   0000             
0042   0000             #define ADDR_DISABLE 0
0043   0000             #define UPDATE	01FCh	; LOAD/SAVE adress update subroutine in ROM
0044   0000             
0045   0000             ;;#define VERBOSE 1
0046   0000              
0047   4009             org     $4009 ; BASIC PROGRAMM
0048   4009             ;= System variables ============================================ 
0049   4009              
0050   4009 00             db 0     	;VERSN 
0051   400A 00 00          dw 0     	;E_PPC 
0052   400C 02 41          dw dfile      ;D_FILE 
0053   400E 03 41          dw dfile+1    ;DF_CC 
0054   4010 20 41          dw var   	;VARS 
0055   4012 00 00          dw 0     	;DEST 
0056   4014 21 41          dw var+1      ;E_LINE 
0057   4016 20 41          dw last-1     ;c_ADD 
0058   4018 00 00          dw 0     	;X_PTR 
0059   401A 21 41          dw last  	;STKBOT 
0060   401C 21 41          dw last  	;STKEND 
0061   401E 00             db 0     	;BERG 
0062   401F 5D 40          dw membot     ;MEM 
0063   4021 00             db 0     ;not used 
0064   4022 02             db 2     ;DF_SZ 
0065   4023 01 00          dw 1     ;S_TOP 
0066   4025 FF FF FF       db $FF,$FF,$FF     ;LAST_K 
0067   4028 37             db 55    ;MARGIN 
0068   4029 F3 40          dw line10     ;NXTLIN   line10   dfile
0069   402B 00 00          dw 0     ;OLDPPC 
0070   402D 00             db 0     ;FLAGX 
0071   402E 00 00          dw 0     ;STRLEN 
0072   4030 8D 0C          dw $0C8D      ;T_ADDR 
0073   4032 00 00          dw 0     ;SEED 
0074   4034 FF FF          dw $FFFF      ;FRAMES 
0075   4036 00 00          db 0,0   ;COORDS 
0076   4038 BC             db $BC   ;PR_CC 
0077   4039 21 18          db 33,24      ;S_POSN 
0078   403B 40             db 01000000B  ;CDFLAG 
0079   403C             
0080   403C             
0081   403C                :ds 33    ;Print buffer --- now used for loader code, all loaded programs need to have the same !
0082   403C             ; relocatible loader code
0083   403C             PLOADER:
0084   403C 2B          	DEC HL
0085   403D             	; wait for byte
0086   403D             PLDWLOOP:
0087   403D 3E 3D       	LD A, ADDR_SELB+A_LSR
0088   403F D3 EF           OUT (COM_ADDR),A
0089   4041 DB 6F           IN A, (COM_DAT)
0090   4043 E6 01       	AND 1			; bit 0 is RX data ready
0091   4045 28 0A       	JR Z, PLDWT
0092   4047             	; read a byte
0093   4047 3E 38       	LD A, ADDR_SELB+A_RHR
0094   4049 D3 EF           OUT (COM_ADDR),A
0095   404B DB 6F           IN A, (COM_DAT)
0096   404D                 ; standard load operation
0097   404D 23          	INC HL			; had a DEC before, so inc heres
0098   404E 77          	LD  (HL),A
0099   404F 18 EC       	JR PLDWLOOP
0100   4051             PLDWT: ; No byte available, time to check for end
0101   4051             	; deselect UART here in case this is the last byte
0102   4051 AF          	XOR A
0103   4052 D3 EF           OUT (COM_ADDR),A
0104   4054 CD FC 01    	CALL UPDATE
0105   4057 18 E3       	JR PLOADER	; follow by dec
0106   4059             PLOADEND:
0107   4059                ds 4    ; Remaining space of 33 byte print buffer, after 29 byte loader
0108   405D             
0109   405D             membot: 
0110   405D                ds 30    ;Calculator´s memory area 
0111   407B                ds 2     ;not used 
0112   407D              
0113   407D             ;= First BASIC line, asm code ================================== 
0114   407D              
0115   407D             line0: 
0116   407D 00 00          db 0,0   ;line number 
0117   407F 72 00          dw line10-$-2 ;line length 
0118   4081 EA             db $ea   ; REM 
0119   4082             
0120   4082             
0121   4082             #define ELINE	4014h  ; Systemvariable, die das Ende des abzuspeichernen BASIC-Programs anzeigt
0122   4082             #define ELINEHI	4015h  ; Systemvariable, die das Ende des abzuspeichernen BASIC-Programs anzeigt
0123   4082             
0124   4082             #define SHOW	0207h  ; ROM-Routinen
0125   4082             #define FAST	02E7h
0126   4082             #define RCLS	0A2Ah
0127   4082             #define GETKEY	02BBh
0128   4082             
0129   4082             
0130   4082             #DEFINE RST_PRTCHAR RST 10H
0131   4082             #DEFINE c_SPACE 0
0132   4082             #DEFINE c_NEWLINE 76H
0133   4082             #DEFINE c_0 1CH
0134   4082             
0135   4082             #DEFINE c_A 38
0136   4082             #DEFINE c_B (c_A+1)
0137   4082             #DEFINE c_C (c_A+2)
0138   4082             #DEFINE c_D (c_A+3)
0139   4082             #DEFINE c_E (c_A+4)
0140   4082             #DEFINE c_F (c_A+5)
0141   4082             #DEFINE c_G (c_A+6)
0142   4082             #DEFINE c_H (c_A+7)
0143   4082             #DEFINE c_I (c_A+8)
0144   4082             #DEFINE c_J (c_A+9)
0145   4082             #DEFINE c_K (c_J+1)
0146   4082             #DEFINE c_L (c_J+2)
0147   4082             #DEFINE c_M (c_J+3)
0148   4082             #DEFINE c_N (c_J+4)
0149   4082             #DEFINE c_O (c_J+5)
0150   4082             #DEFINE c_P (c_J+6)
0151   4082             #DEFINE c_Q (c_J+7)
0152   4082             #DEFINE c_R (c_J+8)
0153   4082             #DEFINE c_S (c_J+9)
0154   4082             #DEFINE c_T (c_S+1)
0155   4082             #DEFINE c_U (c_S+2)
0156   4082             #DEFINE c_V (c_S+3)
0157   4082             #DEFINE c_W (c_S+4)
0158   4082             #DEFINE c_X (c_S+5)
0159   4082             #DEFINE c_Y (c_S+6)
0160   4082             #DEFINE c_Z (c_S+7)
0161   4082             
0162   4082             
0163   4082             
0164   4082             ;
0165   4082             ;   === Main entry point ====
0166   4082             ;
0167   4082             
0168   4082             
0169   4082             BASIC_START:
0170   4082             	;CALL RCLS	; CLS
0171   4082             	; get id code
0172   4082             
0173   4082 CD E2 40    	CALL SETCOMREGS
0174   4085             	;db ADDR_SELB+A_LCR,3	; write baud rate end, set wordlenght 8
0175   4085 3C 00       	db ADDR_SELB+A_MCR,000H	; switch prescaler
0176   4087 3B 83       	db ADDR_SELB+A_LCR,083H	; write baud rate
0177   4089 38 C0       	db ADDR_SELB+0,	192		; LSB of divisor, 192 for 4800 MCR Bit-7=0, or 48 for 1
0178   408B 39 00       	db ADDR_SELB+1,	0		; MSB of divisor
0179   408D 3B BF       	db ADDR_SELB+A_LCR,0BFH	; write Enhanced registers
0180   408F 39 40       	db ADDR_SELB+1,	40H		; FTCR - fifo count in scratchpad FCTR[6] = 1
0181   4091 3B 03       	db ADDR_SELB+A_LCR,3	; write baud rate end, set wordlenght 8
0182   4093 3F 00       	db ADDR_SELB+A_SCPAD,0	; EMSR (LCR[7] = 0, FCTR[6]=) RX Fifo = 0 or 2
0183   4095 3A 07       	db ADDR_SELB+A_FCR,7	; enable and reset fifos
0184   4097 FF              db 0FFH	; end
0185   4098             
0186   4098             	;LD A,c_NEWLINE
0187   4098             	;RST_PRTCHAR
0188   4098             
0189   4098             	; send byte
0190   4098 3E 38       	LD A, ADDR_SELB+A_THR
0191   409A D3 EF           OUT (COM_ADDR),A
0192   409C             
0193   409C             	; dummy read
0194   409C                 ;IN A, (COM_DAT)
0195   409C                ; IN A, (COM_DAT)
0196   409C                 ;IN A, (COM_DAT)
0197   409C             
0198   409C 3E 4F       	LD A, 'O'
0199   409E D3 6F           OUT (COM_DAT),A
0200   40A0 3E 4B       	LD A, 'K'
0201   40A2 D3 6F           OUT (COM_DAT),A
0202   40A4             
0203   40A4             	; wait for input
0204   40A4             WTINPLOOP1:
0205   40A4 3E 3D       	LD A, ADDR_SELB+A_LSR
0206   40A6 D3 EF           OUT (COM_ADDR),A
0207   40A8             WTINPLOOP2:
0208   40A8 DB 6F           IN A, (COM_DAT)
0209   40AA E6 01       	AND 1			; bit 0 is RX data ready
0210   40AC 28 FA       	JR Z, WTINPLOOP2
0211   40AE             	; have data
0212   40AE             
0213   40AE 3E 38       	LD A, ADDR_SELB+A_RHR
0214   40B0 D3 EF           OUT (COM_ADDR),A
0215   40B2 DB 6F           IN A, (COM_DAT)
0216   40B4             
0217   40B4 FE 48       	CP 'H'
0218   40B6 20 0E       	JR NZ, NOSWSP
0219   40B8             	; Switch speed upon H
0220   40B8 CD E2 40    	CALL SETCOMREGS
0221   40BB 3B 83       	db ADDR_SELB+A_LCR,083H	; write baud rate
0222   40BD 38 02       	db ADDR_SELB+0,	2		; LSB of divisor, 4 for 230.4 - 2 for 460.8k   -   MCR Bit-7=0
0223   40BF 39 00       	db ADDR_SELB+1,	0		; MSB of divisor
0224   40C1 3B 03       	db ADDR_SELB+A_LCR,3	; write baud rate end, set wordlenght 8
0225   40C3             	;db ADDR_SELB+A_FCR,7	; enable and reset fifos
0226   40C3 FF              db 0FFH	; end
0227   40C4 18 DE       	JR WTINPLOOP1
0228   40C6             
0229   40C6             NOSWSP:
0230   40C6 FE 4C       	CP 'L'
0231   40C8 20 DA       	JR NZ, WTINPLOOP1
0232   40CA             	; LOAD a P file
0233   40CA             LOADP:
0234   40CA CD E7 02    	CALL FAST	; here we go
0235   40CD             ;	POP HL		; clean up leftover
0236   40CD             ;	LD HL, 0676H	; return address in NEXT-LINE like when LOADING
0237   40CD             ;	EX (SP),HL ; PUSH HL
0238   40CD             	; copy loader code to some safe location
0239   40CD 21 3C 40    	LD HL, PLOADER
0240   40D0             	;32719 is the highest possible for 29byte loader, allows 966 byte progs for 1k
0241   40D0 11 CF 7F    	LD DE, 32719  ; move to area that possibly holds RAM, TODO find even better spot
0242   40D3 01 1D 00    	LD BC, PLOADEND-PLOADER
0243   40D6 ED B0       	LDIR
0244   40D8             	; ok, go
0245   40D8 21 15 40    	LD HL,ELINEHI
0246   40DB 34          	INC (HL) ; make sure no match during load
0247   40DC 21 09 40    	LD HL,4009h	; start of BASIC area to load
0248   40DF C3 CF 7F    	JP 32719  ; +4000H?
0249   40E2             
0250   40E2             
0251   40E2             SETCOMREGS:
0252   40E2 E1          	POP HL	; Ret-Adress
0253   40E3             SETCOM2:
0254   40E3 7E          	LD A,(HL)
0255   40E4 23          	INC HL
0256   40E5 FE FF       	CP  0FFh ; address FF to end
0257   40E7 28 08       	JR Z,SETCOMEXIT
0258   40E9 D3 EF           OUT (COM_ADDR),A
0259   40EB 7E          	LD A,(HL)
0260   40EC 23          	INC HL
0261   40ED D3 6F           OUT (COM_DAT),A
0262   40EF 18 F2       	JR SETCOM2
0263   40F1             SETCOMEXIT:
0264   40F1 E9          	JP (HL)
0265   40F2             
0266   40F2             
0267   40F2             
0268   40F2             
0269   40F2 76             db $76   ;N/L 
0270   40F3              
0271   40F3             line10:
0272   40F3 00 0A          db 0,10  ;line number 
0273   40F5 0B 00          dw dfile-$-2  ;line length 
0274   40F7 F5             db $f5   ;PRINT 
0275   40F8 D4             db $d4   ;USR 
0276   40F9 C5             db $c5   ;VAL
0277   40FA 0B             db $0b   ;"
0278   40FB 1D             db $1d   ;1 
0279   40FC 22             db $22   ;6 
0280   40FD 21             db $21   ;5 
0281   40FE 1D             db $1d   ;1 
0282   40FF 20             db $20   ;4 
0283   4100 0B             db $0b   ;"
0284   4101 76             db $76   ;N/L 
0285   4102             
0286   4102             
0287   4102                
0288   4102             ;- Display file -------------------------------------------- 
0289   4102              
0290   4102             dfile: 
0291   4102 76             db $76 
0292   4103 3F 3D 00 35    db c_Z,c_X,0,c_P,c_I
0292   4107 2E 
0293   4108 76 76 76 76    db $76,$76,$76,$76,$76,$76,$76,$76 
0293   410C 76 76 76 76 
0294   4110 76 76 76 76    db $76,$76,$76,$76,$76,$76,$76,$76 
0294   4114 76 76 76 76 
0295   4118 76 76 76 76    db $76,$76,$76,$76,$76,$76,$76,$76 
0295   411C 76 76 76 76 
0296   4120              
0297   4120             ;- BASIC-Variables ---------------------------------------- 
0298   4120              
0299   4120             var: 
0300   4120 80             db $80 
0301   4121              
0302   4121             ;- End of program area ---------------------------- 
0303   4121             
0304   4121             last: 
0305   4121              
0306   4121                end 
tasm: Number of errors = 0
